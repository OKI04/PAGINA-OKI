// Script de diagn√≥stico para el login
console.log('üîç Iniciando diagn√≥stico de login...');

// Funci√≥n para verificar cookies
function verificarCookies() {
  console.log('üç™ Cookies actuales:', document.cookie);
  const token = obtenerCookie('token');
  console.log('üé´ Token encontrado:', token ? 'S√ç' : 'NO');
  if (token) {
    console.log('üé´ Token value:', token.substring(0, 20) + '...');
  }
}

// Funci√≥n para obtener cookies
function obtenerCookie(nombre) {
  const name = nombre + "=";
  const decodedCookie = decodeURIComponent(document.cookie);
  const ca = decodedCookie.split(';');
  for(let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) === ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) === 0) {
      return c.substring(name.length, c.length);
    }
  }
  return null;
}

// Funci√≥n para probar login
async function probarLogin() {
  console.log('üß™ Probando login...');
  
  const email = 'admin@oki.com';
  const password = 'admin123';
  
  // Determinar la URL base seg√∫n el entorno
  const baseUrl = location.hostname === 'localhost' 
    ? '' 
    : 'https://pagina-back-oki.onrender.com';
  
  const loginUrl = `${baseUrl}/admin/login`;
  
  console.log('üåê URL de login:', loginUrl);
  console.log('üåç Entorno detectado:', location.hostname);
  
  try {
    console.log('üì§ Enviando petici√≥n de login...');
    const res = await fetch(loginUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
      credentials: 'include'
    });

    console.log('üì• Respuesta recibida:', res.status, res.statusText);
    console.log('üì• Headers de respuesta:', [...res.headers.entries()]);

    if (!res.ok) {
      const err = await res.json();
      console.error('‚ùå Error de login:', err);
      return false;
    }

    const data = await res.json();
    console.log('‚úÖ Login exitoso:', data);
    
    // Verificar cookies despu√©s del login
    setTimeout(() => {
      console.log('üîç Verificando cookies despu√©s del login...');
      verificarCookies();
    }, 100);
    
    return true;
    
  } catch (err) {
    console.error('üí• Error en fetch login:', err);
    return false;
  }
}

// Funci√≥n para probar verificaci√≥n de token
async function probarVerificacion() {
  console.log('üîê Probando verificaci√≥n de token...');
  
  const baseUrl = location.hostname === 'localhost' 
    ? '' 
    : 'https://pagina-back-oki.onrender.com';
  
  const verifyUrl = `${baseUrl}/admin/verify`;
  
  console.log('üåê URL de verificaci√≥n:', verifyUrl);
  
  try {
    console.log('üì§ Enviando petici√≥n de verificaci√≥n...');
    const response = await fetch(verifyUrl, {
      method: 'GET',
      credentials: 'include'
    });

    console.log('üì• Respuesta de verificaci√≥n:', response.status, response.statusText);
    console.log('üì• Headers de verificaci√≥n:', [...response.headers.entries()]);

    if (!response.ok) {
      const err = await response.json();
      console.error('‚ùå Error de verificaci√≥n:', err);
      return false;
    }

    const data = await response.json();
    console.log('‚úÖ Verificaci√≥n exitosa:', data);
    return true;
    
  } catch (error) {
    console.error('üí• Error en verificaci√≥n:', error);
    return false;
  }
}

// Funci√≥n para diagn√≥stico completo
async function diagnosticoCompleto() {
  console.log('üöÄ Iniciando diagn√≥stico completo...');
  
  // 1. Verificar estado inicial
  console.log('1Ô∏è‚É£ Estado inicial:');
  verificarCookies();
  
  // 2. Probar login
  console.log('2Ô∏è‚É£ Probando login:');
  const loginExitoso = await probarLogin();
  
  if (!loginExitoso) {
    console.log('‚ùå Login fall√≥, deteniendo diagn√≥stico');
    return;
  }
  
  // 3. Esperar un poco y verificar cookies
  await new Promise(resolve => setTimeout(resolve, 500));
  console.log('3Ô∏è‚É£ Estado despu√©s del login:');
  verificarCookies();
  
  // 4. Probar verificaci√≥n
  console.log('4Ô∏è‚É£ Probando verificaci√≥n:');
  const verificacionExitosa = await probarVerificacion();
  
  if (verificacionExitosa) {
    console.log('‚úÖ Diagn√≥stico completo: TODO FUNCIONA CORRECTAMENTE');
  } else {
    console.log('‚ùå Diagn√≥stico completo: FALLA EN LA VERIFICACI√ìN');
  }
}

// Exponer funciones globalmente para uso manual
window.debugLogin = {
  verificarCookies,
  probarLogin,
  probarVerificacion,
  diagnosticoCompleto
};

console.log('üîß Funciones de diagn√≥stico disponibles:');
console.log('- debugLogin.verificarCookies()');
console.log('- debugLogin.probarLogin()');
console.log('- debugLogin.probarVerificacion()');
console.log('- debugLogin.diagnosticoCompleto()');